{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	"c comment": {
		"scope": "c, cpp",
		"prefix": "cc",
		"body": [
			"/* ${1:Comment} */"
		],
		"description": "C/C++ comment"
	},

	"c comment member": {
		"scope": "c, cpp",
		"prefix": "ccm",
		"body": [
			"/**< ${1:Comment} */"
		],
		"description": "C/C++ comment member"
	},

	"c comment lines": {
		"scope": "c, cpp",
		"prefix": "ccl",
		"body": [
			"/**************************************************",
			" * ${1:Comment Line}",
			" **************************************************/"
		],
		"description": "C/C++ comment lines"
	},

	// "c++ comment line": {
	// 	"scope": "c++",
	// 	"prefix": "cc",
	// 	"body": [
	// 		"/* ${1:Comment} */"
	// 	],
	// 	"description": "C/C++ comment line"
	// },

	// "c++ comment lines": {
	// 	"scope": "c++",
	// 	"prefix": "ccl",
	// 	"body": [
	// 		"/**************************************************",
	// 		" * ${1:Comment Line}",
	// 		" **************************************************/"
	// 	],
	// 	"description": "C/C++ comment lines"
    // },

    "do {...} while(0)": {
		"scope": "c, cpp",
		"prefix": "goto",
		"body": [
			"do {",
            "\tif (${1:/* conditions */}) {",
            "\t\t${2:/* error handle */}",
            "\t\tret = -1;",
            "\t\tbreak;",
            "\t}",
			"} while(0);"
		],
		"description": "C/C++ goto handler"
    },

    "clang exception": {
		"scope": "c",
		"prefix": "ex",
		"body": [
            "if (${2:func}(${3:params}) == ${4:-1}) {",
            "\tsleng_error(\"${2:func} return failure\");",
            // "\t${5:errno = INVAL;}",
            "\t$5ret = -1;",
            "\tbreak;",
            "}",
		],
		"description": "C/C++ exception handler"
	},

	// cli print
	"cli exception": {
		"scope": "c, cpp",
		"prefix": ["cex", "cx"],
		"body": [
			"if (${1:func}(${2:params}) == ${3:-1}) {",
			"\t${5:${TM_FILENAME_BASE/(.*)/${1:/upcase}/i}_TRACE_ERR}(\"${1:func} return failure\\n\");",
			// "\t${5:errno = INVAL;}",
			"\t$4ret = -1;",
			"\tbreak;",
			"}",
		],
		"description": "cli exception handler"
	},

	"cli error": {
		"scope": "c, cpp",
		"prefix": "ce",
		"body": [
			// "${1:${TM_FILENAME_BASE/(.*)/${1:/upcase}/i}}_TRACE_ERR(\"${2}\"${3});",
			"${TM_FILENAME_BASE/(.*)/${1:/upcase}/i}_TRACE_ERR(\"${2}\"${3});",
		],
		"description": "cli error"
	},

	"cli warning": {
		"scope": "c, cpp",
		"prefix": "cw",
		"body": [
			// "${1:${TM_FILENAME_BASE/(.*)/${1:/upcase}/i}}_TRACE_WRN(\"${2}\\n\"${3});",
			"${TM_FILENAME_BASE/(.*)/${1:/upcase}/i}_TRACE_WRN(\"${2}\\n\"${3});",
		],
		"description": "cli warning"
	},

	"cli rel": {
		"scope": "c, cpp",
		"prefix": "cr",
		"body": [
			// "${1:${TM_FILENAME_BASE/(.*)/${1:/upcase}/i}}_TRACE_REL(\"${2}\\n\"${3});",
			"${TM_FILENAME_BASE/(.*)/${1:/upcase}/i}_TRACE_REL(\"${2}\\n\"${3});",
		],
		"description": "cli rel"
	},

	"cli info": {
		"scope": "c, cpp",
		"prefix": "ci",
		"body": [
			// "${1:${TM_FILENAME_BASE/(.*)/${1:/upcase}/i}}_TRACE_INF(\"${2}\\n\"${3});",
			"${TM_FILENAME_BASE/(.*)/${1:/upcase}/i}_TRACE_INF(\"${2}\\n\"${3});",
		],
		"description": "cli info"
	},

	"cli debug": {
		"scope": "c, cpp",
		"prefix": "cd",
		"body": [
			// "${1:${TM_FILENAME_BASE/(.*)/${1:/upcase}/i}}_TRACE_DBG(\"${2}\\n\"${3});",
			"${TM_FILENAME_BASE/(.*)/${1:/upcase}/i}_TRACE_DBG(\"${2}\\n\"${3});",
		],
		"description": "cli debug"
	},

    //sleng debug
    "printf": {
		"scope": "c, cpp",
		"prefix": ["pri", "print", "printf"],
		"body": [
			"printf(\"$1\\n\"$2);"
		],
		"description": "printf"
    },

    "sleng_debug": {
		"scope": "c, cpp",
		"prefix": "sd",
		"body": [
			"sleng_debug(\"$1\\n\"$2);",
		],
		"description": "sleng_debug"
	},

	"sleng_warning": {
		"scope": "c, cpp",
		"prefix": "sw",
		"body": [
			"sleng_warning(\"$1\\n\"$2);",
		],
		"description": "sleng_warning"
	},

    "sleng_error": {
		"scope": "c, cpp",
		"prefix": "se",
		"body": [
			"sleng_error(\"$1\"$2);",
		],
		"description": "sleng_error"
	},

	"printk": {
		"scope": "c",
		"prefix": "pk",
		"body": [
			"printk(\"$1\\n\"$2);",
		],
		"description": "printk"
	},

	"debugk": {
		"scope": "c",
		"prefix": "dk",
		"body": [
			"printk(\"%s#%d: $1\\n\", __FUNCTION__, __LINE__$2);",
		],
		"description": "kernel_debug"
	},

	"C/C++ header": {
		"scope": "c, cpp",
		"prefix": "chead",
		"body": [
            "/***********************************************************************",
			" * @ file $TM_FILENAME",
			"       ${1:__${TM_FILENAME_BASE/(.*)/${1:/upcase}/i}_H__}",
			" * @ brief $2 header file",
			" * @ history",
			" * Date        Version  Author     description",
			" * ==========  =======  =========  ====================================",
			" * $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE  V1.0     ${3|sleng|}      Create",
			" *",
			" * @ Copyright (C)  $CURRENT_YEAR  BHYN  all right reserved",
			" ***********************************************************************/",
			"#ifndef ${1:MACRO}",
			"#define ${1:MACRO}",
            "",
			"#ifdef __cplusplus",
			"extern \"C\"",
			"{",
			"#endif",
			"",
			"",
			"${4:/* Content */}",
			"",
			"",
			"#ifdef __cplusplus",
			"extern \"C\"",
			"};",
			"#endif",
			"",
			"#endif //End of ${1:MACRO}",
            ""
		],
		"description": "C/C++ header"
    },

    "C head common": {
		"prefix": "headc",
        "body": [
			"/***********************************************************************",
			" * @ file $TM_FILENAME",
			"     ${1:__${TM_FILENAME_BASE/(.*)/${1:/upcase}/i}_H__}",
			" * @ brief $2 header file",
			" * @ history",
			" * Date        Version  Author     description",
			" * ==========  =======  =========  ====================================",
			" * $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE  V1.0     ${3|sleng|}      Create",
			" *",
			" * @ Copyright (C)  $CURRENT_YEAR  BHYN  all right reserved",
			"************************************************************************/",
			"#ifndef __${1/[.-]/_/g}_H__",
			"#define __${1/[.-]/_/g}_H__",
			"",
			"#ifdef __${1/[.-]/_/g}_H__GLOBAL",
			"\t#define __${1/[.-]/_/g}_H__EXTERN ",
			"#else",
			"\t#define __${1/[.-]/_/g}_H__EXTERN extern",
			"#endif",
			"",
			"$4",
			"#endif // __${1/[.-]/_/g}_H__",
			"",

		],
        "description": "C header file common define"
	},

	"C #if defined()": {
		"scope": "c, cpp",
		"prefix": "#if",
		"body": [
			"#if defined(${1})",
			"$2",
			"#endif  /* End of ${1} */"
		],
		"description": "C/C++ Pre Process"
	},

	"C #if !defined()": {
		"scope": "c, cpp",
		"prefix": "#ifn",
		"body": [
			"#if !defined(${1})",
			"$2",
			"#endif  /* End of !${1} */"
		],
		"description": "C/C++ Pre Process"
	},

	"C #ifdef": {
		"scope": "c, cpp",
		"prefix": "#ifd",
		"body": [
			"#ifdef ${1}",
			"$2",
			"#endif  /* End of ${1} */"
		],
		"description": "C/C++ #ifdef"
	},

	"C #ifdef-#else": {
		"scope": "c, cpp",
		"prefix": "#ifde",
		"body": [
			"#ifdef ${1}",
			"$2",
			"#else",
			"$3",
			"#endif  /* End of ${1} */"
		],
		"description": "C/C++ #ifdef-#else"
	},

	"C #ifndef": {
		"scope": "c, cpp",
		"prefix": "#ifnd",
		"body": [
			"#ifndef ${1}",
			"$2",
			"#endif  /* End of ${1} */"
		],
		"description": "C/C++ #ifndef"
	},

	"C #ifndef-#else": {
		"scope": "c, cpp",
		"prefix": "#ifne",
		"body": [
			"#ifndef ${1}",
			"$2",
			"#else",
			"$3",
			"#endif  /* End of ${1} */"
		],
		"description": "#ifndef-#else"
	},

	"typedef struct": {
		"scope": "c, cpp",
		"prefix": ["td", "ts", "tst", "st"],
		"body": [
			"typedef struct ${1:name}",
			"{",
			"\t${3:/* member */}",
			"} ${2:NAME}_S, *P${2:NAME}_S, ${1:name}_t, *p${1:name}_t;",
			"#define ${2:NAME}_S_LEN sizeof(${2:NAME}_S)"
		],
		"description": "C Struct"
	},

	"typedef enum": {
		"scope": "c, cpp",
		"prefix": ["te", "ten", "en"],
		"body": [
			"typedef enum ${1:name}",
			"{",
			"\t${2:NAME}_,",
			"\t${2:NAME}_,",
			"\t${2:NAME}_MAX",
			"} ${1:name}_e, ${2:NAME}_E;",
		],
		"description": "C Enum"
	},

	"#include <>":{
		"scope": "c, cpp",
		"prefix": ["Inc", "incs"],
		"body": "#include <${1:.h}>",
		"description": "Std Header"
	},

	"#include \"\"":{
		"scope": "c, cpp",
		"prefix": ["inc", "incu"],
		"body": "#include \"${1:.h}\"",
		"description": "Usr Header"
	},

	"C Function":{
		"scope": "c, cpp",
		"prefix": "func",
		"body": [
			"${1:static }${2:int} ${3:func}($4)",
			"{",
			"\t${2:int} ret = 0;\n",
			"\tdo",
			"\t{",
			"\t\t${5:/* body */}",
			"\t} while (0);\n",
			"\treturn ret;",
			"}",
			// "}\t/* End of ${3:func}() */",
		],
		"description": "C/C++ Function"
	},
}

