# --------------
# Functions
# --------------
global !p
def printf_expand_args(snip):
	"""
	This will look how many placeholders printf has and adds the separated commas
	at the end.
	"""

	# now add so many "," as much as the amount of placeholders
	amount_placeholders = snip.tabstops[1].current_text.count("%")
	output = ""
	# Add the amount of tabstops
	for placeholder_index in range(3, amount_placeholders + 3):
		output += f", ${placeholder_index}"

	# convert them into tabstops
	snip.expand_anon(output)

def get_file_name():
	snip.rv = snip.fn

def get_file_name_upcase():
	snip.rv = snip.fn.upper().replace(".", "_")
	#snip.rv = snip.fn.upper().replace("-", "_")

def get_file_name_base():
	snip.rv = snip.fn.split(".")[0]

def get_file_name_base_upcase():
	snip.rv = snip.fn.upper().split(".")[0]

import time
def curr_time():
	snip.rv = time.strftime("%Y-%m-%d", time.localtime())

def curr_year():
	snip.rv = time.localtime()[0]
endglobal


# --------------
# Snippets
# --------------
snippet wow
${1:Text}`!p snip.rv = (75-2*len(t[1]))*' '+t[1].upper()`
endsnippet

snippet cc "C/C++ comment"
/* ${1:Comment} */
endsnippet

snippet ccm "C/C++ comment member"
/**< ${1:Comment} */
endsnippet

snippet ccl "C/C++ comment lines" b
/**************************************************
 * ${1:Comment Line}
 **************************************************/
endsnippet

snippet goto "C/C++ goto handler" b
do {
	if (${1:/* conditions */}) {
		${2:/* error handle */}
		ret = -1;
		break;
	}
} while(0);
endsnippet

snippet ex "C/C++ exception handler"
if (${2:func}(${3:params}) == ${4:-1}) {
	sleng_error("${2:func} return failure");
	$5ret = -1;
	break;
}
endsnippet

snippet cex "cli exception handler"
if (${1:func}(${2:params}) == ${3:-1}) {
	${5:`!p get_file_name_base_upcase()`_TRACE_ERR}("${1:func} return failure\n");
	$4ret = -1;
	break;
}
endsnippet

post_jump "printf_expand_args(snip)"
snippet ce "cli error"
`!p get_file_name_base_upcase()`_TRACE_ERR("${1}\n"${2});
endsnippet

post_jump "printf_expand_args(snip)"
snippet cw "cli warning"
`!p get_file_name_base_upcase()`_TRACE_WRN("${1}\n"${2});
endsnippet

post_jump "printf_expand_args(snip)"
snippet cr "cli rel"
`!p get_file_name_base_upcase()`_TRACE_REL("${1}\n"${2});
endsnippet

post_jump "printf_expand_args(snip)"
snippet ci "cli info"
`!p get_file_name_base_upcase()`_TRACE_INF("${1}\n"${2});
endsnippet

post_jump "printf_expand_args(snip)"
snippet cd "cli debug"
`!p get_file_name_base_upcase()`_TRACE_DBG("${1}\n"${2});
endsnippet

post_jump "printf_expand_args(snip)"
snippet pri "printf"
printf("$1\n"$2);
endsnippet

post_jump "printf_expand_args(snip)"
snippet sd "sleng_debug"
sleng_debug("$1\n"$2);
endsnippet

post_jump "printf_expand_args(snip)"
snippet sw "sleng_warning"
sleng_warning("$1\n"$2);
endsnippet

post_jump "printf_expand_args(snip)"
snippet se "sleng_error"
sleng_error("$1"$2);
endsnippet

post_jump "printf_expand_args(snip)"
snippet pk "printk"
printk("$1\n"$2);
endsnippet

post_jump "printf_expand_args(snip)"
snippet dk "kernel_debug"
printk("%s#%d: $1\n", __FUNCTION__, __LINE__$2);
endsnippet

snippet chead "C/C++ header" b
/***********************************************************************
 * @ file `!p get_file_name()`
       ${1:__`!p get_file_name_upcase()`__}
 * @ brief $2 header file
 * @ history
 * Date        Version  Author     description
 * ==========  =======  =========  ====================================
 * `!p curr_time()`  V1.0     ${3:sleng}      Create
 *
 * @ Copyright (C)  `!p curr_year()`  BHYN  all right reserved
 ***********************************************************************/
#ifndef $1
#define $1

#ifdef __cplusplus
extern "C"
{
#endif


${4:/* Content */}


#ifdef __cplusplus
extern "C"
};
#endif

#endif //End of $1

endsnippet

snippet #if "C/C++ Pre Process" b
#if defined(${1})
$2
#endif  /* End of ${1} */
endsnippet

snippet #ifn "C/C++ Pre Process"
#if !defined(${1})
$2
#endif  /* End of !${1} */
endsnippet

snippet #ifd "C/C++ #ifdef"
#ifdef ${1}
$2
#endif  /* End of ${1} */
endsnippet

snippet #ifde "C/C++ #ifdef-#else"
#ifdef ${1}
$2
#else
$3
#endif  /* End of ${1} */
endsnippet

snippet #ifnd "C/C++ #ifndef"
#ifndef ${1}
$2
#endif  /* End of ${1} */
endsnippet

snippet #ifne "#ifndef-#else"
#ifndef ${1}
$2
#else
$3
#endif  /* End of ${1} */
endsnippet

snippet td "C Struct"
typedef struct ${1:name}
{
	${3:/* member */}
} ${2:NAME}_S, *P${2:NAME}_S, ${1:name}_t, *p${1:name}_t;
#define ${2:NAME}_S_LEN sizeof(${2:NAME}_S)
endsnippet

snippet te "C Enum"
typedef enum ${1:name}
{
	${2:NAME}_,
	${2:NAME}_,
	${2:NAME}_MAX
} ${1:name}_e, ${2:NAME}_E;
endsnippet

snippet Inc "Std Header"
#include <${1:.h}>endsnippet

snippet inc "Usr Header"
#include "${1:.h}"endsnippet

snippet func "C/C++ Function"
${1:static }${2:int} ${3:func}($4)
{
	${2:int} ret = 0;

	do
	{
		${5:/* body */}
	} while (0);

	return ret;
}
endsnippet

post_jump "if snip.tabstop == 0 : split_line(snip.tabstops[4].current_text)"
snippet api "Function Header"
/******************************************************************************
* Function:         $1
* Description:      ${4:${VISUAL}}
* Where:`!p
snip.rv = ""
snip >> 2
args = get_args(t[2])
if args:
	for arg in args:
		snip.rv += '\n' + '*' + ' '*19 + arg + ' - TODO'
snip << 2
`
* Return:           $5
* Error:            $6
*****************************************************************************/
${1} `!p get_file_name_base()`_($2){
	${0}
}
endsnippet
# vim:ft=snippets:
